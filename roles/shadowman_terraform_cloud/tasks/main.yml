---
- name: Send Get request using uri module to get vars information
  ansible.builtin.uri:
    url: "https://app.terraform.io/api/v2/vars?filter%5Borganization%5D%5Bname%5D=Shadowman&filter%5Bworkspace%5D%5Bid%5D={{ workspace_id }}"
    headers:
      Content-Type: "application/vnd.api+json"
      Authorization: "Bearer {{ api_token }}"
    status_code: 200, 204
    body_format: json
    return_content: true
    timeout: 60
  register: terraformvarsresult

- name: Set Var ID
  ansible.builtin.set_fact:
    number_of_instances_id: "{{ terraformvarsresult.json.data | selectattr('attributes.key', 'match', 'number_of_instances') | map(attribute='id') | join(',') }}"
    instance_name_convention_id: "{{ terraformvarsresult.json.data | selectattr('attributes.key', 'match', 'instance_name_convention') | map(attribute='id') | join(',') }}"
    rhel_version_id: "{{ terraformvarsresult.json.data | selectattr('attributes.key', 'match', 'rhel_version') | map(attribute='id') | join(',') }}"

- name: Update number_of_instances if defined
  ansible.builtin.uri:
    url: "https://app.terraform.io/api/v2/vars/{{ number_of_instances_id }}"
    method: PATCH
    headers:
      Content-Type: "application/vnd.api+json"
      Authorization: "Bearer {{ api_token }}"
    body: |-
      {
        "data": {
          "id":"{{ number_of_instances_id }}",
          "attributes": {
            "value":"{{ numinstances }}"
          },
          "type":"vars"
        }
      }
    body_format: json
    status_code: 200
  when: numinstances is defined

- name: Update prefix if defined
  ansible.builtin.uri:
    url: "https://app.terraform.io/api/v2/vars/{{ instance_name_convention_id }}"
    method: PATCH
    headers:
      Content-Type: "application/vnd.api+json"
      Authorization: "Bearer {{ api_token }}"
    body: |-
      {
        "data": {
          "id":"{{ instance_name_convention_id }}",
          "attributes": {
            "value":"{{ prefix }}"
          },
          "type":"vars"
        }
      }
    body_format: json
    status_code: 200
  when: prefix is defined

- name: Update operating_system if defined
  ansible.builtin.uri:
    url: "https://app.terraform.io/api/v2/vars/{{ rhel_version_id }}"
    method: PATCH
    headers:
      Content-Type: "application/vnd.api+json"
      Authorization: "Bearer {{ api_token }}"
    body: |-
      {
        "data": {
          "id":"{{ rhel_version_id }}",
          "attributes": {
            "value":"{{ operating_system }}"
          },
          "type":"vars"
        }
      }
    body_format: json
    status_code: 200
  when: rhel_version_id is defined
- name: Send POST request using uri module to run plan
  ansible.builtin.uri:
    url: "https://app.terraform.io/api/v2/runs"
    method: POST
    headers:
      Content-Type: "application/vnd.api+json"
      Authorization: "Bearer {{ api_token }}"
    body: |-
      {
        "data": {
          "type": "runs",
          "relationships": {
            "workspace": {
              "data": {
                "type": "workspaces",
                "id": "{{ workspace_id }}"
              }
            }
          }
        }
      }
    status_code: 201
    body_format: json
    timeout: 60
  register: terraformplanresponse

- name: Send Get request using uri module to get plan information
  ansible.builtin.uri:
    url: "https://app.terraform.io/api/v2/plans/{{ terraformplanresponse.json.data.relationships.plan.data.id }}/json-output"
    headers:
      Content-Type: "application/vnd.api+json"
      Authorization: "Bearer {{ api_token }}"
    status_code: 200, 204
    body_format: json
    return_content: true
    timeout: 60
  register: terraformplanresult
  retries: 20
  until: '"\"complete\":true" in terraformplanresult.content'

- name: Set plan output to JSON Var
  ansible.builtin.set_fact:
    jsonoutput: "{{ terraformplanresult.content | from_json }}"

- name: Get before and after states for VMs
  ansible.builtin.set_fact:
    terraformbefore: "{{ jsonoutput.output_changes.vm_name_terraformvms.before | default([]) }}"
    terraformafter: "{{ jsonoutput.output_changes.vm_name_terraformvms.after | default([]) }}"

- name: Set fact of VMs to be deleted
  ansible.builtin.set_fact:
    vmstodelete: "{{ terraformbefore | difference(terraformafter) }}"

- name: Set fact of VMs to be configured
  ansible.builtin.set_fact:
    vmstoadd: "{{ terraformafter | difference(terraformbefore) }}"

- name: Unsubscribe VMs
  ansible.controller.workflow_launch:
    workflow_template: "Unsubscribe VMs for Terraform"
    extra_vars:
      vm_name: "{{ vmstodelete | join(',') }}"
      ticket_number: "{{ ticket_number | default(omit) }}"
    wait: true
  when: vmstodelete | length > 0

- name: Send POST request using uri module to apply the plan
  ansible.builtin.uri:
    url: "https://app.terraform.io/api/v2/runs/{{ terraformplanresponse.json.data.id }}/actions/apply"
    method: POST
    headers:
      Content-Type: "application/vnd.api+json"
      Authorization: "Bearer {{ api_token }}"
    body: |-
      {
        "comment": "approved"
      }
    status_code: 202
    timeout: 60
  register: terraformapplyresponse

- name: Send Get request using uri module to get run status completed
  ansible.builtin.uri:
    url: "https://app.terraform.io/api/v2/runs/{{ terraformplanresponse.json.data.id }}"
    headers:
      Content-Type: "application/vnd.api+json"
      Authorization: "Bearer {{ api_token }}"
    status_code: 200
    body_format: json
    return_content: true
    timeout: 60
  register: terraformrunstatus
  retries: 50
  until: terraformrunstatus.json.data.attributes.status == "applied"

- name: Set hostnames if VMWare
  ansible.controller.job_launch:
    job_template: "Hostname Set VMWare"
    extra_vars:
      vm_name: "{{ vmstoadd | join(',') }}"
      operating_system: "{{ operating_system }}"
    wait: true
  when:
    - jsonoutput.configuration.provider_config.vsphere.name is defined
    - vmstoadd | length > 0

- name: Config VM, Deploy Web App with Failure Paths Citrix
  ansible.controller.workflow_launch:
    workflow_template: "Config VM, Deploy Web App with Failure Paths Citrix"
    extra_vars:
      vm_name: "{{ vmstoadd | join(',') }}"
      ticket_number: "{{ ticket_number | default(omit) }}"
    wait: true
  when: vmstoadd | length > 0
